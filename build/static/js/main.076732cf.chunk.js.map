{"version":3,"sources":["Box.js","Player.js","Path.js","Map.js","Game.js","index.js"],"names":["Box","props","ref","useRef","useState","setHover","active","setActive","useFrame","state","delta","current","rotation","x","scale","castShadow","onClick","event","onPointerOver","onPointerOut","args","color","Player","player","light","target","firstPersonCamera","THREE","targetPosition","setTargetPosition","useEffect","localToWorld","lookAt","y","z","orientationEnabled","Math","PI","position","PerspectiveCamera","makeDefault","DeviceOrientationControls","camera","SpotLight","distance","angle","decay","penumbra","attenuation","anglePower","Path","nodes","useGLTF","path","lookAtPlane","mouseDown","setMouseDown","positionPreview","setPositionPreview","lookAtPreview","setLookAtPreview","onPointerMove","point","onPointerUp","playerMoveTo","playerLookAt","side","DoubleSide","dispose","receiveShadow","geometry","navMesh","onPointerDown","console","log","face","wireframe","Model","group","Torus","Game","userInteracted","setUserInteracted","playerPosition","setPlayerPosition","setPlayerLookAt","className","onMouseMove","preventDefault","onTouchMove","fallback","preload","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.076732cf.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\n\nexport default function Box(props) {\n  const ref = useRef();\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01));\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={active ? 1.5 : 1}\n      castShadow\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={props.color} />\n    </mesh>\n  );\n}\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport {\n  PerspectiveCamera,\n  DeviceOrientationControls,\n  SpotLight\n} from \"@react-three/drei\";\n\nexport default function Player(props) {\n  const player = useRef();\n  const light = useRef();\n  const target = useRef();\n  const firstPersonCamera = useRef();\n\n  const [targetPosition, setTargetPosition] = useState(new THREE.Vector3());\n\n  useEffect(() => {\n    setTargetPosition(\n      firstPersonCamera.current.localToWorld(new THREE.Vector3(0, 0, -10))\n    );\n    light.current.target = target.current;\n    player.current.lookAt(props.lookAt.x, props.lookAt.y, props.lookAt.z);\n\n    //if we are not rendering before the game starts\n    if (props.orientationEnabled === true) {\n      player.current.rotation.y = player.current.rotation.y + Math.PI;\n    }\n  }, [\n    firstPersonCamera,\n    light,\n    player,\n    props.lookAt,\n    props.orientationEnabled\n  ]);\n\n  return (\n    <>\n      <object3D ref={player} position={props.position}>\n        <PerspectiveCamera\n          makeDefault\n          ref={firstPersonCamera}\n        ></PerspectiveCamera>\n        {props.orientationEnabled === true ? (\n          <DeviceOrientationControls camera={firstPersonCamera.current} />\n        ) : (\n          \"\"\n        )}\n      </object3D>\n      <SpotLight\n        position={props.position}\n        ref={light}\n        distance={20}\n        angle={0.5}\n        decay={2}\n        penumbra={1}\n        attenuation={5}\n        anglePower={5} // Diffuse-cone anglePower (default: 5)\n        castShadow\n      />\n      <object3D position={targetPosition} ref={target} />\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { DoubleSide } from \"three\";\nimport { Circle, Plane } from \"@react-three/drei\";\nimport { useGLTF } from \"@react-three/drei\";\n\nexport default function Path(props) {\n  const { nodes } = useGLTF(\"/navMesh.gltf\");\n  const path = useRef();\n  const lookAtPlane = useRef();\n  const [mouseDown, setMouseDown] = useState(false);\n  const [positionPreview, setPositionPreview] = useState(new THREE.Vector3());\n  const [lookAtPreview, setLookAtPreview] = useState(new THREE.Vector3());\n\n  return (\n    <>\n      {mouseDown === true ? (\n        <>\n          <Plane\n            ref={lookAtPlane}\n            args={[200, 200]}\n            position={[0, 0, 0]}\n            rotation-x={Math.PI / 2}\n            onPointerMove={(event) => {\n              setLookAtPreview(\n                new THREE.Vector3(\n                  event.point.x,\n                  event.point.y + 1.65,\n                  event.point.z\n                )\n              );\n            }}\n            onPointerUp={() => {\n              if (mouseDown === true) {\n                props.playerMoveTo(positionPreview);\n                props.playerLookAt(lookAtPreview);\n                setMouseDown(false);\n              }\n            }}\n          >\n            <meshStandardMaterial color={\"green\"} side={DoubleSide} />\n          </Plane>\n          <Circle\n            args={[0.7, 8]}\n            position={[\n              lookAtPreview.x,\n              positionPreview.y - 1.63,\n              lookAtPreview.z\n            ]}\n            rotation-x={Math.PI / 2}\n          >\n            <meshStandardMaterial color={\"black\"} side={DoubleSide} />\n          </Circle>\n          <Circle\n            args={[0.7, 8]}\n            position={[\n              positionPreview.x,\n              positionPreview.y - 1.64,\n              positionPreview.z\n            ]}\n            rotation-x={Math.PI / 2}\n          >\n            <meshStandardMaterial color={\"yellow\"} side={DoubleSide} />\n          </Circle>\n        </>\n      ) : (\n        <></>\n      )}\n      <group ref={path} {...props} dispose={null}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.navMesh.geometry}\n          scale={[2, 2, 2]}\n          onPointerDown={(event) => {\n            if (event.distance < 10) {\n              setMouseDown(true);\n\n              console.log(event.face);\n\n              setPositionPreview(\n                new THREE.Vector3(\n                  event.point.x,\n                  event.point.y + 1.65,\n                  event.point.z\n                )\n              );\n            } else {\n              return;\n            }\n          }}\n        >\n          <meshStandardMaterial\n            color={\"red\"}\n            side={DoubleSide}\n            wireframe={true}\n          />\n        </mesh>\n      </group>\n    </>\n  );\n}\n\nuseGLTF.preload(\"/navMesh.gltf\");\n\n/*<Plane\n      args={[10, 10]}\n      {...props}\n      ref={ref}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n      side={THREE.DoubleSide}\n      rotation-x={Math.PI / 2}\n    >\n      \n    </Plane>*/\n\n/*<Plane\n        ref={path}\n        args={[1, 200]}\n        position={[0, 0, 0]}\n        rotation-x={Math.PI / 2}\n        onPointerDown={(event) => {\n          if (event.distance < 10) {\n            setMouseDown(true);\n\n            console.log(event.face);\n\n            setPositionPreview(\n              new THREE.Vector3(\n                event.point.x,\n                event.point.y + 1.65,\n                event.point.z\n              )\n            );\n          } else {\n            return;\n          }\n        }}\n      >\n        <meshStandardMaterial\n          color={\"red\"}\n          side={DoubleSide}\n          wireframe={true}\n        />\n      </Plane>*/\n","import React, { useRef } from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\n\nexport default function Model(props) {\n  const group = useRef();\n  const { nodes } = useGLTF(\"/pit_joined.gltf\");\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        scale={[1, 1, 1]}\n        castShadow\n        receiveShadow\n        geometry={nodes.Torus.geometry}\n      >\n        <meshToonMaterial />\n      </mesh>\n    </group>\n  );\n}\n\nuseGLTF.preload(\"/pit_joined.gltf\");\n","import React, { useState, Suspense } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport Box from \"./Box\";\nimport Player from \"./Player\";\nimport Path from \"./Path\";\nimport Map from \"./Map.js\";\n\nexport default function Game(props) {\n  const [userInteracted, setUserInteracted] = useState(false);\n  const [playerPosition, setPlayerPosition] = useState(\n    new THREE.Vector3(0, 1.65, 0)\n  );\n  const [playerLookAt, setPlayerLookAt] = useState(\n    new THREE.Vector3(1, 1.65, 10)\n  );\n\n  return (\n    <>\n      {userInteracted === false ? (\n        <div\n          className=\"overlay\"\n          onClick={() => {\n            setUserInteracted(true);\n          }}\n        >\n          Start\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Canvas\n        onMouseMove={(event) => event.preventDefault()}\n        onTouchMove={(event) => event.preventDefault()}\n      >\n        <hemisphereLight args={[0xffffbb, 0x080820, 0.05]} castShadow />\n        <Box position={[3, 5, -10]} color={\"navy\"} />\n        <Box position={[2, 4, -10]} color={\"blue\"} />\n        <Box position={[1, 3, -10]} color={\"teal\"} />\n\n        <Box position={[-3, 5, -10]} color={\"pink\"} />\n        <Box position={[-2, 4, -10]} color={\"orange\"} />\n        <Box position={[-1, 3, -10]} color={\"red\"} />\n        <Suspense fallback={<Box />}>\n          <Map />\n          <Path\n            playerMoveTo={setPlayerPosition}\n            playerLookAt={setPlayerLookAt}\n          />\n        </Suspense>\n        <Player\n          position={[playerPosition.x, playerPosition.y, playerPosition.z]}\n          lookAt={playerLookAt}\n          orientationEnabled={userInteracted}\n        />\n      </Canvas>\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\nimport \"./styles.css\";\n\nimport Game from \"./Game\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Game />, rootElement);\n"],"sourceRoot":""}